package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import service.MembershipService;
import service.OrderService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class PaymentGUI {
    private JFrame frame;
    private JPanel paymentPanel;
    private JRadioButton cashButton;
    private JRadioButton creditCardRadioButton;
    private JButton confirmButton;
    private JButton backButton;
    private JLabel paymentLabel;
    private JLabel textLabel;
    private String method;
    private String[] allchoices;

    public static void main(String[] args) {
        PaymentGUI payment = new PaymentGUI(args);
        payment.frame = new JFrame("Payment");
        payment.frame.setContentPane(payment.paymentPanel);
        payment.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        payment.frame.pack();
        payment.frame.setSize(800, 600);
        payment.frame.setLocationRelativeTo(null);
        payment.frame.setVisible(true);
    }

    public PaymentGUI(final String[] choices) {
        allchoices = choices;
        backButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                frame.dispose();
                ConfirmGUI.main(choices);
            }
        });
        confirmButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                if (method == null) {
                    Object[] options = {"OK"};
                    JOptionPane.showOptionDialog(null, "Method of Payment Must be Chosen!",
                            "WARNING", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                            null, options, options[0]);
                } else {
                    if (choices.length == 14) {
                        if (!choices[12].substring(8, 9).equals("Y")) {
                            MembershipService member = new MembershipService();
                            member.addVS(choices[12].substring(0, 8), 1);
                        }
                        Object[] options = {"OK"};
                        JOptionPane.showOptionDialog(null,
                                "Sending the Number of Stamps Collected So Far to Your Email or Telephone...\r\n " +
                                        "Please Wait a Moment",
                                "Sending Message", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                                null, options, options[0]);
                        try {
                            Robot r = new Robot();
                            r.delay(2000);
                        } catch (AWTException ex) {
                            ex.printStackTrace();
                        }
                    }
                    OrderService order = new OrderService();
                    try {
                        order.setMethods(method);
                        order.setOrder(allchoices);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    frame.dispose();
                    SPaymentGUI.main(null);
                }
            }
        });
        cashButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JRadioButton temp = (JRadioButton) e.getSource();
                if (temp.isSelected())
                    method = temp.getText();
            }
        });
        creditCardRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JRadioButton temp = (JRadioButton) e.getSource();
                if (temp.isSelected())
                    method = temp.getText();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        paymentPanel = new JPanel();
        paymentPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(5, 15, 15, 15), -1, -1));
        paymentPanel.setBackground(new Color(-721665));
        paymentPanel.setForeground(new Color(-15132391));
        cashButton = new JRadioButton();
        cashButton.setBackground(new Color(-721665));
        Font cashButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, cashButton.getFont());
        if (cashButtonFont != null) cashButton.setFont(cashButtonFont);
        cashButton.setForeground(new Color(-15132391));
        cashButton.setText("Cash");
        paymentPanel.add(cashButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        creditCardRadioButton = new JRadioButton();
        creditCardRadioButton.setBackground(new Color(-721665));
        Font creditCardRadioButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, creditCardRadioButton.getFont());
        if (creditCardRadioButtonFont != null) creditCardRadioButton.setFont(creditCardRadioButtonFont);
        creditCardRadioButton.setForeground(new Color(-15132391));
        creditCardRadioButton.setSelected(false);
        creditCardRadioButton.setText("Credit Card");
        paymentPanel.add(creditCardRadioButton, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        confirmButton = new JButton();
        confirmButton.setBackground(new Color(-1642256));
        Font confirmButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, confirmButton.getFont());
        if (confirmButtonFont != null) confirmButton.setFont(confirmButtonFont);
        confirmButton.setForeground(new Color(-15132391));
        confirmButton.setText("Confirm");
        paymentPanel.add(confirmButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHEAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setBackground(new Color(-1642256));
        Font backButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setForeground(new Color(-15132391));
        backButton.setText("Back");
        paymentPanel.add(backButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        paymentLabel = new JLabel();
        paymentLabel.setBackground(new Color(-721665));
        Font paymentLabelFont = this.$$$getFont$$$(null, Font.BOLD, 28, paymentLabel.getFont());
        if (paymentLabelFont != null) paymentLabel.setFont(paymentLabelFont);
        paymentLabel.setForeground(new Color(-15132391));
        paymentLabel.setText("Method of Payment");
        paymentPanel.add(paymentLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textLabel = new JLabel();
        textLabel.setBackground(new Color(-721665));
        Font textLabelFont = this.$$$getFont$$$(null, Font.BOLD, 22, textLabel.getFont());
        if (textLabelFont != null) textLabel.setFont(textLabelFont);
        textLabel.setForeground(new Color(-15132391));
        textLabel.setText("Please choose one of the following ways to pay");
        paymentPanel.add(textLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return paymentPanel;
    }
}
