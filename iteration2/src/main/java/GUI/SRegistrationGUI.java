package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 * @program: src
 * @description:
 * @create: 2020-04-08 18:16
 **/

public class SRegistrationGUI {
    private JFrame frame;
    private JPanel SRegistration;
    private JButton nextButton;
    private JButton backButton;
    private JTextField STextField;
    private JLabel SLabel;
    private String[] allchoices;

    public SRegistrationGUI(final String[] choices) {
        allchoices = choices;

        $$$setupUI$$$();
        backButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                frame.dispose();
                ConfirmGUI.main(choices);
            }
        });
        nextButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                frame.dispose();
                AccountGUI.main(choices);
            }
        });
    }

    public static void main(String[] args) {
        SRegistrationGUI successful = new SRegistrationGUI(args);
        successful.frame = new JFrame("Successful Registration");
        successful.frame.setContentPane(successful.SRegistration);
        successful.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        successful.frame.pack();
        successful.frame.setSize(800, 600);
        successful.frame.setLocationRelativeTo(null);
        successful.frame.setVisible(true);
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        String str = "Successful " + allchoices[12].substring(8);
        //System.out.println(allchoices[12]);
        STextField = new JTextField();
        STextField.setText(str);
        STextField.setBorder(new EmptyBorder(0, 0, 0, 0));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        SRegistration = new JPanel();
        SRegistration.setLayout(new GridLayoutManager(2, 2, new Insets(5, 15, 15, 15), -1, -1));
        SRegistration.setBackground(new Color(-721665));
        SRegistration.setForeground(new Color(-15132391));
        nextButton = new JButton();
        nextButton.setBackground(new Color(-1642256));
        Font nextButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, nextButton.getFont());
        if (nextButtonFont != null) nextButton.setFont(nextButtonFont);
        nextButton.setForeground(new Color(-15132391));
        nextButton.setText("View Account");
        SRegistration.add(nextButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_SOUTHEAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setBackground(new Color(-1642256));
        Font backButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setForeground(new Color(-15132391));
        backButton.setText("Back to Payment");
        SRegistration.add(backButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        STextField.setBackground(new Color(-721665));
        STextField.setCaretColor(new Color(-721665));
        STextField.setDisabledTextColor(new Color(-15132391));
        STextField.setEditable(false);
        STextField.setEnabled(true);
        Font STextFieldFont = this.$$$getFont$$$(null, Font.BOLD, 48, STextField.getFont());
        if (STextFieldFont != null) STextField.setFont(STextFieldFont);
        STextField.setForeground(new Color(-15132391));
        STextField.setOpaque(false);
        STextField.setRequestFocusEnabled(true);
        STextField.setSelectedTextColor(new Color(-15132391));
        STextField.setSelectionColor(new Color(-721665));
        SRegistration.add(STextField, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return SRegistration;
    }
}
