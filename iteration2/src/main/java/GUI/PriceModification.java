package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import service.ManagerService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class PriceModification {
    private JFrame frame;
    private JTextField newPrice;
    private JButton modifyButton;
    private JButton backButton;
    private JPanel modificationPanel;
    private JLabel modificationLabel;
    private JLabel productTitle;
    private JLabel priceTitle;
    private JLabel newPriceTitle;
    private JLabel confirmationTitle;
    private JLabel nameLabel;
    private JLabel priceLabel;

    public PriceModification(String name) {
        frame = new JFrame("PriceModify");
        frame.setContentPane(modificationPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 500);
        frame.setPreferredSize(new Dimension(600, 500));
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);

        ManagerService managerService = new ManagerService();
        productTitle.setText(name);
        priceLabel.setText(String.valueOf(managerService.readPrices(name)));

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                ModifyPrice.main(null);
            }
        });
        modifyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                managerService.setPrices(name,Float.parseFloat(newPrice.getText()));
                Object[] options = {"OK"};
                JOptionPane.showOptionDialog(null, "Price modified!",
                        "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                        null, options, options[0]);
                PriceModification.main(name);
                frame.dispose();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        modificationPanel = new JPanel();
        modificationPanel.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        modificationPanel.setBackground(new Color(-721665));
        modificationLabel = new JLabel();
        Font modificationLabelFont = this.$$$getFont$$$(null, Font.BOLD, 28, modificationLabel.getFont());
        if (modificationLabelFont != null) modificationLabel.setFont(modificationLabelFont);
        modificationLabel.setText("Modification");
        modificationPanel.add(modificationLabel, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        productTitle = new JLabel();
        Font productTitleFont = this.$$$getFont$$$(null, -1, 20, productTitle.getFont());
        if (productTitleFont != null) productTitle.setFont(productTitleFont);
        productTitle.setText("Product");
        modificationPanel.add(productTitle, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        priceTitle = new JLabel();
        Font priceTitleFont = this.$$$getFont$$$(null, -1, 20, priceTitle.getFont());
        if (priceTitleFont != null) priceTitle.setFont(priceTitleFont);
        priceTitle.setText("Price");
        modificationPanel.add(priceTitle, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newPriceTitle = new JLabel();
        Font newPriceTitleFont = this.$$$getFont$$$(null, -1, 20, newPriceTitle.getFont());
        if (newPriceTitleFont != null) newPriceTitle.setFont(newPriceTitleFont);
        newPriceTitle.setText("New Price");
        modificationPanel.add(newPriceTitle, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        confirmationTitle = new JLabel();
        Font confirmationTitleFont = this.$$$getFont$$$(null, -1, 20, confirmationTitle.getFont());
        if (confirmationTitleFont != null) confirmationTitle.setFont(confirmationTitleFont);
        confirmationTitle.setText("Confirmation");
        modificationPanel.add(confirmationTitle, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameLabel = new JLabel();
        Font nameLabelFont = this.$$$getFont$$$(null, -1, 20, nameLabel.getFont());
        if (nameLabelFont != null) nameLabel.setFont(nameLabelFont);
        nameLabel.setText("Name");
        modificationPanel.add(nameLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        priceLabel = new JLabel();
        Font priceLabelFont = this.$$$getFont$$$(null, -1, 20, priceLabel.getFont());
        if (priceLabelFont != null) priceLabel.setFont(priceLabelFont);
        priceLabel.setText("$$$$");
        modificationPanel.add(priceLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newPrice = new JTextField();
        Font newPriceFont = this.$$$getFont$$$(null, -1, 20, newPrice.getFont());
        if (newPriceFont != null) newPrice.setFont(newPriceFont);
        modificationPanel.add(newPrice, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        modifyButton = new JButton();
        Font modifyButtonFont = this.$$$getFont$$$(null, -1, 20, modifyButton.getFont());
        if (modifyButtonFont != null) modifyButton.setFont(modifyButtonFont);
        modifyButton.setText("Modify");
        modificationPanel.add(modifyButton, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        Font backButtonFont = this.$$$getFont$$$(null, -1, 20, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setText("Back");
        modificationPanel.add(backButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        modificationPanel.add(spacer1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        modificationPanel.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        modificationPanel.add(spacer3, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        modificationPanel.add(spacer4, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return modificationPanel;
    }

    public static void main(String args) {
        /*JFrame frame = new JFrame("PriceModify");
        frame.setContentPane(new PriceModify().modificationPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 500);
        frame.setPreferredSize(new Dimension(600, 500));
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);*/
        PriceModification priceModify = new PriceModification(args);
    }
}
