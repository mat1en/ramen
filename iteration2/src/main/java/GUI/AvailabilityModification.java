package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import service.ManagerService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class AvailabilityModification {
    private JFrame frame;
    private JTextField newAvailibility;
    private JButton modifyButton;
    private JButton backButton;
    private JPanel modificationPanel;
    private JLabel modificationLabel;
    private JLabel productTitleLabel;
    private JLabel availabilityTitleLabel;
    private JLabel newAvailabilityTitleLabel;
    private JLabel confirmationLabel;
    private JLabel nameLabel;
    private JLabel availabilityLabel;

    public AvailabilityModification(String name) {
        frame = new JFrame("AvailabilityModification");
        frame.setContentPane(modificationPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 500);
        frame.setPreferredSize(new Dimension(600, 500));
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);

        ManagerService managerService = new ManagerService();
        nameLabel.setText(name);
        availabilityLabel.setText(String.valueOf(managerService.readAvailability(name)));

        modifyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                managerService.setAvailability(name, Boolean.parseBoolean(newAvailibility.getText()));
                Object[] options = {"OK"};
                JOptionPane.showOptionDialog(null, "Availability modified!",
                        "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                        null, options, options[0]);
                AvailabilityModification.main(name);
                frame.dispose();
            }
        });
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                ModifyAvailability.main(null);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        modificationPanel = new JPanel();
        modificationPanel.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        modificationPanel.setBackground(new Color(-721665));
        modificationLabel = new JLabel();
        Font modificationLabelFont = this.$$$getFont$$$(null, Font.BOLD, 28, modificationLabel.getFont());
        if (modificationLabelFont != null) modificationLabel.setFont(modificationLabelFont);
        modificationLabel.setText("Modification");
        modificationPanel.add(modificationLabel, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        modificationPanel.add(spacer1, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        productTitleLabel = new JLabel();
        Font productTitleLabelFont = this.$$$getFont$$$(null, -1, 20, productTitleLabel.getFont());
        if (productTitleLabelFont != null) productTitleLabel.setFont(productTitleLabelFont);
        productTitleLabel.setText("Product");
        modificationPanel.add(productTitleLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        availabilityTitleLabel = new JLabel();
        Font availabilityTitleLabelFont = this.$$$getFont$$$(null, -1, 20, availabilityTitleLabel.getFont());
        if (availabilityTitleLabelFont != null) availabilityTitleLabel.setFont(availabilityTitleLabelFont);
        availabilityTitleLabel.setText("availability");
        modificationPanel.add(availabilityTitleLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newAvailabilityTitleLabel = new JLabel();
        Font newAvailabilityTitleLabelFont = this.$$$getFont$$$(null, -1, 20, newAvailabilityTitleLabel.getFont());
        if (newAvailabilityTitleLabelFont != null) newAvailabilityTitleLabel.setFont(newAvailabilityTitleLabelFont);
        newAvailabilityTitleLabel.setText("New Availability");
        modificationPanel.add(newAvailabilityTitleLabel, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        confirmationLabel = new JLabel();
        Font confirmationLabelFont = this.$$$getFont$$$(null, -1, 20, confirmationLabel.getFont());
        if (confirmationLabelFont != null) confirmationLabel.setFont(confirmationLabelFont);
        confirmationLabel.setText("Confirmation");
        modificationPanel.add(confirmationLabel, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameLabel = new JLabel();
        Font nameLabelFont = this.$$$getFont$$$(null, -1, 20, nameLabel.getFont());
        if (nameLabelFont != null) nameLabel.setFont(nameLabelFont);
        nameLabel.setText("Name");
        modificationPanel.add(nameLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        availabilityLabel = new JLabel();
        Font availabilityLableFont = this.$$$getFont$$$(null, -1, 20, availabilityLabel.getFont());
        if (availabilityLableFont != null) availabilityLabel.setFont(availabilityLableFont);
        availabilityLabel.setText("TTTFFF");
        modificationPanel.add(availabilityLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newAvailibility = new JTextField();
        Font newAvailibilityFont = this.$$$getFont$$$(null, -1, 20, newAvailibility.getFont());
        if (newAvailibilityFont != null) newAvailibility.setFont(newAvailibilityFont);
        modificationPanel.add(newAvailibility, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        modifyButton = new JButton();
        Font modifyButtonFont = this.$$$getFont$$$(null, -1, 20, modifyButton.getFont());
        if (modifyButtonFont != null) modifyButton.setFont(modifyButtonFont);
        modifyButton.setText("Modify");
        modificationPanel.add(modifyButton, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        Font backButtonFont = this.$$$getFont$$$(null, -1, 20, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setText("Back");
        modificationPanel.add(backButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return modificationPanel;
    }

    public static void main(String args) {
        /*JFrame frame = new JFrame("AvailabilityModification");
        frame.setContentPane(new AvailabilityModification().modificationPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 500);
        frame.setPreferredSize(new Dimension(600, 500));
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);*/
        AvailabilityModification availabilityModification = new AvailabilityModification(args);
    }
}
