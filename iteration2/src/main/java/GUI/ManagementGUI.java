package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class ManagementGUI {
    private JFrame frame;
    private JPanel managementPanel;
    private JButton modifyPriceButton;
    private JButton viewStatsButton;
    private JButton modifyAvailabilityButton;
    private JLabel managementLabel;

    public ManagementGUI() {
        modifyPriceButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                ModifyPrice.main(null);
            }
        });
        modifyAvailabilityButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                ModifyAvailability.main(null);
            }
        });
        viewStatsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                ViewStats.main(null);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        managementPanel = new JPanel();
        managementPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        managementPanel.setBackground(new Color(-721665));
        managementLabel = new JLabel();
        Font managementLabelFont = this.$$$getFont$$$("Helvetica", Font.BOLD, 28, managementLabel.getFont());
        if (managementLabelFont != null) managementLabel.setFont(managementLabelFont);
        managementLabel.setText("Management");
        managementPanel.add(managementLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modifyPriceButton = new JButton();
        Font modifyPriceButtonFont = this.$$$getFont$$$("Helvetica", -1, 20, modifyPriceButton.getFont());
        if (modifyPriceButtonFont != null) modifyPriceButton.setFont(modifyPriceButtonFont);
        modifyPriceButton.setText("Modify Price");
        managementPanel.add(modifyPriceButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, 40), null, 0, false));
        viewStatsButton = new JButton();
        Font viewStatsButtonFont = this.$$$getFont$$$("Helvetica", -1, 20, viewStatsButton.getFont());
        if (viewStatsButtonFont != null) viewStatsButton.setFont(viewStatsButtonFont);
        viewStatsButton.setHorizontalAlignment(0);
        viewStatsButton.setHorizontalTextPosition(0);
        viewStatsButton.setText("View Stats");
        managementPanel.add(viewStatsButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 40), new Dimension(200, 40), new Dimension(200, 40), 0, false));
        modifyAvailabilityButton = new JButton();
        Font modifyAvailabilityButtonFont = this.$$$getFont$$$("Helvetica", -1, 20, modifyAvailabilityButton.getFont());
        if (modifyAvailabilityButtonFont != null) modifyAvailabilityButton.setFont(modifyAvailabilityButtonFont);
        modifyAvailabilityButton.setText("Modify Availability");
        managementPanel.add(modifyAvailabilityButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, 40), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return managementPanel;
    }

    public static void main(String[] args) {
        ManagementGUI managementGUI = new ManagementGUI();
        managementGUI.frame = new JFrame("Management");
        managementGUI.frame.setContentPane(managementGUI.managementPanel);
        managementGUI.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        managementGUI.frame.setSize(600, 500);
        managementGUI.frame.setPreferredSize(new Dimension(600, 500));
        managementGUI.frame.setLocationRelativeTo(null);
        managementGUI.frame.pack();
        managementGUI.frame.setVisible(true);
    }
}
