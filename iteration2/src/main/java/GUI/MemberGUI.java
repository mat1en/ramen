package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import service.MembershipService;
import service.OrderService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class MemberGUI {
    private JFrame frame;
    private JPanel memberPanel;
    private JTextField numTextField;
    private JButton loginButton;
    private JLabel memberLabel;
    private JLabel numLabel;
    private JButton registerButton;
    private JButton skipButton;
    private JLabel notLabel;
    private String mebershipId;

    public MemberGUI(final String[] choices) {
        skipButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                frame.dispose();
                OrderService order = new OrderService();
                order.skip2confirm(choices);
            }
        });
        registerButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                frame.dispose();
                RegisterGUI.main(choices);
            }
        });
        loginButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                mebershipId = numTextField.getText();
                MembershipService member = new MembershipService();
                member.setMemberId(mebershipId);
                boolean flag = false;
                try {
                    flag = member.checkMermeberId();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                if (!flag) {
                    Object[] options = {"OK"};
                    JOptionPane.showOptionDialog(null, "Wrong Membership Number!",
                            "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                            null, options, options[0]);
                } else {
                    frame.dispose();
                    member.setType("Log In!");
                    member.member2SMember(choices);
                }
            }
        });
    }

    public static void main(String[] args) {
        MemberGUI member = new MemberGUI(args);
        member.frame = new JFrame("Member");
        member.frame.setContentPane(member.memberPanel);
        member.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        member.frame.pack();
        member.frame.setSize(800, 600);
        member.frame.setLocationRelativeTo(null);
        member.frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        memberPanel = new JPanel();
        memberPanel.setLayout(new GridLayoutManager(5, 3, new Insets(5, 15, 15, 15), -1, -1, true, false));
        memberPanel.setBackground(new Color(-721665));
        memberPanel.setForeground(new Color(-15132391));
        numTextField = new JTextField();
        numTextField.setBackground(new Color(-1642256));
        Font numTextFieldFont = this.$$$getFont$$$(null, -1, 20, numTextField.getFont());
        if (numTextFieldFont != null) numTextField.setFont(numTextFieldFont);
        numTextField.setForeground(new Color(-15132391));
        memberPanel.add(numTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 3, false));
        numLabel = new JLabel();
        numLabel.setBackground(new Color(-721665));
        Font numLabelFont = this.$$$getFont$$$(null, Font.BOLD, 20, numLabel.getFont());
        if (numLabelFont != null) numLabel.setFont(numLabelFont);
        numLabel.setForeground(new Color(-15132391));
        numLabel.setText("Membership No.");
        memberPanel.add(numLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        memberLabel = new JLabel();
        memberLabel.setBackground(new Color(-721665));
        Font memberLabelFont = this.$$$getFont$$$(null, Font.BOLD, 24, memberLabel.getFont());
        if (memberLabelFont != null) memberLabel.setFont(memberLabelFont);
        memberLabel.setForeground(new Color(-15132391));
        memberLabel.setText("I AM A MEMBER");
        memberPanel.add(memberLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setBackground(new Color(-1642256));
        Font loginButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, loginButton.getFont());
        if (loginButtonFont != null) loginButton.setFont(loginButtonFont);
        loginButton.setForeground(new Color(-15132391));
        loginButton.setText("Login");
        memberPanel.add(loginButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        notLabel = new JLabel();
        notLabel.setBackground(new Color(-721665));
        Font notLabelFont = this.$$$getFont$$$(null, Font.BOLD, 24, notLabel.getFont());
        if (notLabelFont != null) notLabel.setFont(notLabelFont);
        notLabel.setForeground(new Color(-15132391));
        notLabel.setText("I AM NOT A MEMBER");
        memberPanel.add(notLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        registerButton = new JButton();
        registerButton.setBackground(new Color(-1642256));
        Font registerButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, registerButton.getFont());
        if (registerButtonFont != null) registerButton.setFont(registerButtonFont);
        registerButton.setForeground(new Color(-15132391));
        registerButton.setText("Register");
        memberPanel.add(registerButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        skipButton = new JButton();
        skipButton.setBackground(new Color(-1642256));
        Font skipButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, skipButton.getFont());
        if (skipButtonFont != null) skipButton.setFont(skipButtonFont);
        skipButton.setForeground(new Color(-15132391));
        skipButton.setText("Skip");
        memberPanel.add(skipButton, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return memberPanel;
    }

}
