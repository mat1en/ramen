package GUI;

import com.alee.laf.WebLookAndFeel;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class IndexGUI {
    private JFrame frame;
    private JPanel indexPanel;
    private JButton enterButton;
    private JLabel welcomeLabel;
    private JLabel toLabel;
    private JLabel restaurantLabel;


    public IndexGUI() {
        enterButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                frame.dispose();
                FixedGUI.main(null);
            }
        });
    }

    public static void main(String[] args) {
        // You should always work with UI inside Event Dispatch Thread (EDT)
        // That includes installing L&F, creating any Swing components etc.
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                // Install WebLaF as application LaF
                WebLookAndFeel.install();
                IndexGUI index = new IndexGUI();
                index.frame = new JFrame("Welcome");
                index.frame.setContentPane(index.indexPanel);
                index.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                index.frame.pack();
                index.frame.setSize(800, 600);
                index.frame.setLocationRelativeTo(null);
                index.frame.setVisible(true);
            }
        });

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        indexPanel = new JPanel();
        indexPanel.setLayout(new GridLayoutManager(4, 1, new Insets(5, 15, 15, 15), -1, -1));
        indexPanel.setBackground(new Color(-721665));
        indexPanel.setEnabled(true);
        indexPanel.setForeground(new Color(-15132391));
        welcomeLabel = new JLabel();
        welcomeLabel.setBackground(new Color(-721665));
        Font welcomeLabelFont = this.$$$getFont$$$(null, Font.BOLD, 48, welcomeLabel.getFont());
        if (welcomeLabelFont != null) welcomeLabel.setFont(welcomeLabelFont);
        welcomeLabel.setForeground(new Color(-15132391));
        welcomeLabel.setText("WELCOME");
        indexPanel.add(welcomeLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        toLabel = new JLabel();
        toLabel.setBackground(new Color(-721665));
        Font toLabelFont = this.$$$getFont$$$(null, Font.BOLD, 48, toLabel.getFont());
        if (toLabelFont != null) toLabel.setFont(toLabelFont);
        toLabel.setForeground(new Color(-15132391));
        toLabel.setText("TO");
        indexPanel.add(toLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        restaurantLabel = new JLabel();
        restaurantLabel.setBackground(new Color(-721665));
        Font restaurantLabelFont = this.$$$getFont$$$(null, Font.BOLD, 48, restaurantLabel.getFont());
        if (restaurantLabelFont != null) restaurantLabel.setFont(restaurantLabelFont);
        restaurantLabel.setForeground(new Color(-15132391));
        restaurantLabel.setText("TOTORO RAMEN");
        indexPanel.add(restaurantLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        enterButton = new JButton();
        enterButton.setBackground(new Color(-1642256));
        Font enterButtonFont = this.$$$getFont$$$(null, -1, 20, enterButton.getFont());
        if (enterButtonFont != null) enterButton.setFont(enterButtonFont);
        enterButton.setForeground(new Color(-15132391));
        enterButton.setText("Enter");
        indexPanel.add(enterButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return indexPanel;
    }

}
