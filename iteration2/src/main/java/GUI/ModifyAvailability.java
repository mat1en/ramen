package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import service.ManagerService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ModifyAvailability {
    private JFrame frame;
    private JButton modifyButton;
    private JButton modifyButton1;
    private JButton modifyButton2;
    private JButton modifyButton3;
    private JButton modifyButton4;
    private JButton modifyButton5;
    private JButton modifyButton6;
    private JPanel ModifyAvailabilityPanel;
    private JLabel modifyAvailabilityLabel;
    private JLabel nameLabel;
    private JLabel availabilityLabel;
    private JLabel operationLabel;
    private JLabel tonkotsuLabel;
    private JLabel TonkotsuAvailabilityLabel;
    private JLabel shoyuLabel;
    private JLabel shioLabel;
    private JLabel noriLabel;
    private JLabel chashuLabel;
    private JLabel boiledEggLabel;
    private JLabel bambooShootLabel;
    private JLabel ShoyuAvailaiblityLabel;
    private JLabel ShioAvailabilityLabel;
    private JLabel NoriAvailabilityLabel;
    private JLabel ChashuAvailabilityLabel;
    private JLabel BoiledEggAvailabilityLabel;
    private JLabel BambooAvailabilityLabel;
    private JButton backButton;

    public ModifyAvailability() {
        frame = new JFrame("ModifyAvailability");
        frame.setContentPane(ModifyAvailabilityPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 500);
        frame.setPreferredSize(new Dimension(600, 500));
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);

        ManagerService managerService=new ManagerService();
        TonkotsuAvailabilityLabel.setText(String.valueOf(managerService.readAvailability("Tonkotsu")));
        ShoyuAvailaiblityLabel.setText(String.valueOf(managerService.readAvailability("Shoyu")));
        ShioAvailabilityLabel.setText(String.valueOf(managerService.readAvailability("Shio")));
        NoriAvailabilityLabel.setText(String.valueOf(managerService.readAvailability("Nori")));
        ChashuAvailabilityLabel.setText(String.valueOf(managerService.readAvailability("Chashu")));
        BoiledEggAvailabilityLabel.setText(String.valueOf(managerService.readAvailability("Boiled egg")));
        BambooAvailabilityLabel.setText(String.valueOf(managerService.readAvailability("Bamboo shoot")));

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                ManagementGUI.main(null);
            }
        });
        modifyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Tonkotsu
                frame.dispose();
                AvailabilityModification.main("Tonkotsu");
            }
        });
        modifyButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Shoyu
                frame.dispose();
                AvailabilityModification.main("Shoyu");
            }
        });
        modifyButton2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Shio
                frame.dispose();
                AvailabilityModification.main("Shio");
            }
        });
        modifyButton3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Nori
                frame.dispose();
                AvailabilityModification.main("Nori");
            }
        });
        modifyButton4.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Chashu
                frame.dispose();
                AvailabilityModification.main("Chasu");
            }
        });
        modifyButton5.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Egg
                frame.dispose();
                AvailabilityModification.main("Boiled egg");
            }
        });
        modifyButton6.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Bamboo shoots
                frame.dispose();
                AvailabilityModification.main("Bamboo shoot");
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        ModifyAvailabilityPanel = new JPanel();
        ModifyAvailabilityPanel.setLayout(new GridLayoutManager(12, 3, new Insets(0, 0, 0, 0), -1, -1));
        ModifyAvailabilityPanel.setBackground(new Color(-721665));
        modifyAvailabilityLabel = new JLabel();
        Font modifyAvailabilityLabelFont = this.$$$getFont$$$("Helvetica", Font.BOLD, 28, modifyAvailabilityLabel.getFont());
        if (modifyAvailabilityLabelFont != null) modifyAvailabilityLabel.setFont(modifyAvailabilityLabelFont);
        modifyAvailabilityLabel.setText("Modify Availability");
        ModifyAvailabilityPanel.add(modifyAvailabilityLabel, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        ModifyAvailabilityPanel.add(spacer1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        nameLabel = new JLabel();
        Font nameLabelFont = this.$$$getFont$$$("Helvetica", -1, 24, nameLabel.getFont());
        if (nameLabelFont != null) nameLabel.setFont(nameLabelFont);
        nameLabel.setText("Name");
        ModifyAvailabilityPanel.add(nameLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        availabilityLabel = new JLabel();
        Font availabilityLabelFont = this.$$$getFont$$$("Helvetica", -1, 24, availabilityLabel.getFont());
        if (availabilityLabelFont != null) availabilityLabel.setFont(availabilityLabelFont);
        availabilityLabel.setText("Availability");
        ModifyAvailabilityPanel.add(availabilityLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        operationLabel = new JLabel();
        Font operationLabelFont = this.$$$getFont$$$("Helvetica", -1, 24, operationLabel.getFont());
        if (operationLabelFont != null) operationLabel.setFont(operationLabelFont);
        operationLabel.setText("Operation");
        ModifyAvailabilityPanel.add(operationLabel, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tonkotsuLabel = new JLabel();
        Font tonkotsuLabelFont = this.$$$getFont$$$(null, -1, 20, tonkotsuLabel.getFont());
        if (tonkotsuLabelFont != null) tonkotsuLabel.setFont(tonkotsuLabelFont);
        tonkotsuLabel.setText("Tonkotsu");
        ModifyAvailabilityPanel.add(tonkotsuLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TonkotsuAvailabilityLabel = new JLabel();
        Font TonkotsuAvailabilityLabelFont = this.$$$getFont$$$(null, -1, 20, TonkotsuAvailabilityLabel.getFont());
        if (TonkotsuAvailabilityLabelFont != null) TonkotsuAvailabilityLabel.setFont(TonkotsuAvailabilityLabelFont);
        TonkotsuAvailabilityLabel.setText("TTTFFF");
        ModifyAvailabilityPanel.add(TonkotsuAvailabilityLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        shoyuLabel = new JLabel();
        Font shoyuLabelFont = this.$$$getFont$$$(null, -1, 20, shoyuLabel.getFont());
        if (shoyuLabelFont != null) shoyuLabel.setFont(shoyuLabelFont);
        shoyuLabel.setText("Shoyu");
        ModifyAvailabilityPanel.add(shoyuLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        shioLabel = new JLabel();
        Font shioLabelFont = this.$$$getFont$$$(null, -1, 20, shioLabel.getFont());
        if (shioLabelFont != null) shioLabel.setFont(shioLabelFont);
        shioLabel.setText("Shio");
        ModifyAvailabilityPanel.add(shioLabel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        noriLabel = new JLabel();
        Font noriLabelFont = this.$$$getFont$$$(null, -1, 20, noriLabel.getFont());
        if (noriLabelFont != null) noriLabel.setFont(noriLabelFont);
        noriLabel.setText("Nori");
        ModifyAvailabilityPanel.add(noriLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chashuLabel = new JLabel();
        Font chashuLabelFont = this.$$$getFont$$$(null, -1, 20, chashuLabel.getFont());
        if (chashuLabelFont != null) chashuLabel.setFont(chashuLabelFont);
        chashuLabel.setText("Chashu");
        ModifyAvailabilityPanel.add(chashuLabel, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        boiledEggLabel = new JLabel();
        Font boiledEggLabelFont = this.$$$getFont$$$(null, -1, 20, boiledEggLabel.getFont());
        if (boiledEggLabelFont != null) boiledEggLabel.setFont(boiledEggLabelFont);
        boiledEggLabel.setText("Boiled Egg");
        ModifyAvailabilityPanel.add(boiledEggLabel, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bambooShootLabel = new JLabel();
        Font bambooShootLabelFont = this.$$$getFont$$$(null, -1, 20, bambooShootLabel.getFont());
        if (bambooShootLabelFont != null) bambooShootLabel.setFont(bambooShootLabelFont);
        bambooShootLabel.setText("Bamboo Shoot");
        ModifyAvailabilityPanel.add(bambooShootLabel, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ShoyuAvailaiblityLabel = new JLabel();
        Font ShoyuAvailaiblityLableFont = this.$$$getFont$$$(null, -1, 20, ShoyuAvailaiblityLabel.getFont());
        if (ShoyuAvailaiblityLableFont != null) ShoyuAvailaiblityLabel.setFont(ShoyuAvailaiblityLableFont);
        ShoyuAvailaiblityLabel.setText("TTTFFF");
        ModifyAvailabilityPanel.add(ShoyuAvailaiblityLabel, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ShioAvailabilityLabel = new JLabel();
        Font ShioAvailabilityLabelFont = this.$$$getFont$$$(null, -1, 20, ShioAvailabilityLabel.getFont());
        if (ShioAvailabilityLabelFont != null) ShioAvailabilityLabel.setFont(ShioAvailabilityLabelFont);
        ShioAvailabilityLabel.setText("TTTFFF");
        ModifyAvailabilityPanel.add(ShioAvailabilityLabel, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        NoriAvailabilityLabel = new JLabel();
        Font NoriAvailabilityLabelFont = this.$$$getFont$$$(null, -1, 20, NoriAvailabilityLabel.getFont());
        if (NoriAvailabilityLabelFont != null) NoriAvailabilityLabel.setFont(NoriAvailabilityLabelFont);
        NoriAvailabilityLabel.setText("TTTFFF");
        ModifyAvailabilityPanel.add(NoriAvailabilityLabel, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ChashuAvailabilityLabel = new JLabel();
        Font ChashuAvailabilityLabelFont = this.$$$getFont$$$(null, -1, 20, ChashuAvailabilityLabel.getFont());
        if (ChashuAvailabilityLabelFont != null) ChashuAvailabilityLabel.setFont(ChashuAvailabilityLabelFont);
        ChashuAvailabilityLabel.setText("TTTFFF");
        ModifyAvailabilityPanel.add(ChashuAvailabilityLabel, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        BoiledEggAvailabilityLabel = new JLabel();
        Font BoiledEggAvailabilityLabelFont = this.$$$getFont$$$(null, -1, 20, BoiledEggAvailabilityLabel.getFont());
        if (BoiledEggAvailabilityLabelFont != null) BoiledEggAvailabilityLabel.setFont(BoiledEggAvailabilityLabelFont);
        BoiledEggAvailabilityLabel.setText("TTTFFF");
        ModifyAvailabilityPanel.add(BoiledEggAvailabilityLabel, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        BambooAvailabilityLabel = new JLabel();
        Font BambooAvailabilityLabelFont = this.$$$getFont$$$(null, -1, 20, BambooAvailabilityLabel.getFont());
        if (BambooAvailabilityLabelFont != null) BambooAvailabilityLabel.setFont(BambooAvailabilityLabelFont);
        BambooAvailabilityLabel.setText("TTTFFF");
        ModifyAvailabilityPanel.add(BambooAvailabilityLabel, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modifyButton = new JButton();
        Font modifyButtonFont = this.$$$getFont$$$(null, -1, 20, modifyButton.getFont());
        if (modifyButtonFont != null) modifyButton.setFont(modifyButtonFont);
        modifyButton.setText("Modify");
        ModifyAvailabilityPanel.add(modifyButton, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modifyButton1 = new JButton();
        Font modifyButton1Font = this.$$$getFont$$$(null, -1, 20, modifyButton1.getFont());
        if (modifyButton1Font != null) modifyButton1.setFont(modifyButton1Font);
        modifyButton1.setText("Modify");
        ModifyAvailabilityPanel.add(modifyButton1, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modifyButton2 = new JButton();
        Font modifyButton2Font = this.$$$getFont$$$(null, -1, 20, modifyButton2.getFont());
        if (modifyButton2Font != null) modifyButton2.setFont(modifyButton2Font);
        modifyButton2.setText("Modify");
        ModifyAvailabilityPanel.add(modifyButton2, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modifyButton3 = new JButton();
        Font modifyButton3Font = this.$$$getFont$$$(null, -1, 20, modifyButton3.getFont());
        if (modifyButton3Font != null) modifyButton3.setFont(modifyButton3Font);
        modifyButton3.setText("Modify");
        ModifyAvailabilityPanel.add(modifyButton3, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modifyButton4 = new JButton();
        Font modifyButton4Font = this.$$$getFont$$$(null, -1, 20, modifyButton4.getFont());
        if (modifyButton4Font != null) modifyButton4.setFont(modifyButton4Font);
        modifyButton4.setText("Modify");
        ModifyAvailabilityPanel.add(modifyButton4, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modifyButton5 = new JButton();
        Font modifyButton5Font = this.$$$getFont$$$(null, -1, 20, modifyButton5.getFont());
        if (modifyButton5Font != null) modifyButton5.setFont(modifyButton5Font);
        modifyButton5.setText("Modify");
        ModifyAvailabilityPanel.add(modifyButton5, new GridConstraints(8, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modifyButton6 = new JButton();
        Font modifyButton6Font = this.$$$getFont$$$(null, -1, 20, modifyButton6.getFont());
        if (modifyButton6Font != null) modifyButton6.setFont(modifyButton6Font);
        modifyButton6.setText("Modify");
        ModifyAvailabilityPanel.add(modifyButton6, new GridConstraints(9, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        ModifyAvailabilityPanel.add(spacer2, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        backButton = new JButton();
        Font backButtonFont = this.$$$getFont$$$(null, -1, 20, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setText("Back");
        ModifyAvailabilityPanel.add(backButton, new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        ModifyAvailabilityPanel.add(spacer3, new GridConstraints(10, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        ModifyAvailabilityPanel.add(spacer4, new GridConstraints(10, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return ModifyAvailabilityPanel;
    }

    public static void main(String[] args) {
        /*JFrame frame = new JFrame("ModifyAvailability");
        frame.setContentPane(new ModifyAvailability().ModifyAvailabilityPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 500);
        frame.setPreferredSize(new Dimension(600, 500));
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);*/
        ModifyAvailability modifyAvailability = new ModifyAvailability();
    }
}
